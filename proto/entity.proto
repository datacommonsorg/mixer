// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//  **** IMPORTANT NOTE ****
//
//  The proto of BT data has to match exactly the g3 proto, including tag
//  number.

syntax = "proto3";
package datacommons;

option go_package = "github.com/datacommonsorg/mixer/internal/proto";

import "mcf.proto";

// Basic info for a node (subject or object).
message EntityInfo {
  string name = 1;
  repeated string types = 2;
  string dcid = 3;
  string provenance_id = 4;
  string value = 5; // Only for object value.
}

// A page of nodes. The page number starts from 0, and is in the cache key.
// Page size is set by ::datacommons::prophet::kPageSize.
message PagedNodes {
  // A list of EntityInfo messages for PagedPropVal{In|Out} cache result.
  repeated EntityInfo nodes = 1;
  double total_page_count = 2;
}

// Basic info for a collection of nodes.
message EntityInfoCollection {
  repeated EntityInfo entities = 1;
  double total = 3;

  reserved 2;
}

message IdWithProperty {
  string prop = 1;
  string val = 2;
}

message EntityIds { repeated IdWithProperty ids = 1; }

// An entity is represented by a subgraph, which contains itself and its
// neighbors.
message EntitySubGraph {
  // REQUIRED: source_id must be a key within `sub_graph.nodes`, or one of the
  // `ids`.
  string source_id = 1;
  oneof graph_representation {
    McfGraph sub_graph = 2;
    EntityIds entity_ids = 3;
  }
}

message EntityPair {
  EntitySubGraph entity_one = 1;
  EntitySubGraph entity_two = 2;
}

message NodePropertyValues {
  string node = 1;
  repeated EntityInfo values = 2;
}

message PropertyValue {
  string property = 1;
  string value = 2;
}