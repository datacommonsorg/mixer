// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//  **** IMPORTANT NOTE ****
//
//  The proto of BT data has to match exactly the g3 proto, including tag
//  number.

// REST API URL from the proto in this file:
// ========================================
//    /stat-var/group
//    /stat-var/search
//    /stat-var/summary
//    /stat-var/path
//    /stat-var/group/all (/place/stat-var-group)
// ========================================

syntax = "proto3";
package datacommons;

option go_package = "github.com/datacommonsorg/mixer/internal/proto";

import "entity.proto";

message EntityStatVarExistence {
  // Set if this value is for an entity+SVG-ID key, but not for an entity+SV-ID
  // key.
  int32 descendent_stat_var_count = 2;

  reserved 1;
}

// Summary information about a StatVar
message StatVarSummary {
  message Place {
    string dcid = 1;
    string name = 3;

    reserved 2;
  }
  message PlaceTypeSummary {
    // Number of places with stats for this StatVar
    int32 place_count = 4;
    // A short (<4) list of most-populated places of this type
    repeated Place top_places = 3;
    // Minimum observation value for places of this type
    optional double min_value = 5;
    // Maximum observation value for places of this type
    optional double max_value = 6;

    reserved 1, 2;
  }

  message SeriesSummary {
    message SeriesKey {
      // Measurement method of this time series type
      string measurement_method = 1;
      // Observation period of this time series type
      string observation_period = 2;
      // Scaling factor of this time series type
      string scaling_factor = 3;
      // Unit of this time series type
      string unit = 4;
      // Whether this time series type is aggregated by Data Commons
      bool is_dc_aggregate = 5;
      // Whether this time series type is imputed by Data Commons
      bool is_dc_imputed = 6;
    }
    SeriesKey series_key = 1;

    // Earliest observation date of this time series type
    string earliest_date = 2;
    // Latest observation date in this time series type
    string latest_date = 3;
    // Map of place type to PlaceTypeSummary for this time series type
    map<string, PlaceTypeSummary> place_type_summary = 6;
    // Minimum observation value of this time series type
    optional double min_value = 7;
    // Maximum observation value of this time series type
    optional double max_value = 8;
    // Number of observations of this time series type, might exceed INT32_MAX.
    double observation_count = 9;
    // Number of series of this time series type, might exceed INT32_MAX.
    double time_series_count = 10;

    reserved 4, 5;
  }

  message ProvenanceSummary {
    // Import name
    string import_name = 1;
    // Release frequency of this provenance
    string release_frequency = 4;
    // SeriesSummary for each time series in this provenance
    repeated SeriesSummary series_summary = 5;
    // Number of observations from this provenance, might exceed INT32_MAX.
    double observation_count = 6;
    // Number of time series from this provenance, might exceed INT32_MAX.
    double time_series_count = 7;

    reserved 2, 3;
  }

  // Key: type of place.  When places have multiple types, the dominant place
  // type is selected.
  map<string, PlaceTypeSummary> place_type_summary = 1;

  // Key: provenance ID
  map<string, ProvenanceSummary> provenance_summary = 2;
}

message StatVarGroups {
  // Key is StatVarGroup ID.
  map<string, StatVarGroupNode> stat_var_groups = 1;
}

message StatVarGroupNode {
  message ChildSVG {
    // StatVarGroup ID.
    string id = 1;
    // The specialized entity of the child StatVarGroup relative to the parent.
    // This can be used for naming when the child appears in the hierarchy.
    string specialized_entity = 2;

    //==== Below are fields not in original cache.
    // Name suitable for display in tree.
    string display_name = 101;
    // Number of unique descendent stat-vars.
    int32 descendent_stat_var_count = 102;
  }

  message ChildSV {
    // StatVar ID.
    string id = 1;
    // Name suitable for search.
    string search_name = 2;
    // Names suitable for search.
    repeated string search_names = 4;
    // Name suitable for display in tree.
    string display_name = 3;
    // Serialized string containing StatVar definition.
    //
    // The format is P=V delimited by commas. The required properties are
    // abbreviated (populationType is 'pt', statType is 'st', etc).  For
    // example, "median income of women" is:
    //
    //    "st=medianValue,pt=Person,mp=income,gender=Female"
    //
    // When statType is "measuredValue" (default), it is skipped.
    string definition = 5;

    //==== Below are fields not in original cache.
    //==== and thus we start with a large tag number.

    // Whether there is a data for this stat var
    bool has_data = 101;
  }

  // Absolute name of StatVarGroup. Typically used only for root nodes.
  string absolute_name = 1;
  // List of children StatVar IDs directly attached to this group. If there are
  // auto-generated and curated IDs for a StatVar, we'll prefer the curated.
  repeated ChildSV child_stat_vars = 2;
  // List of children StatVarGroups that are immediate specializations.
  repeated ChildSVG child_stat_var_groups = 3;
  // Number of unique descendent stat-vars.
  int32 descendent_stat_var_count = 5;

    //==== Below are fields not in original cache.
    //==== and thus we start with a large tag number.

  // List of parent StatVarGroup IDs.
  repeated string parent_stat_var_groups = 101;

  reserved 4;
}

message GetStatVarGroupRequest {
  repeated string entities = 2;
  reserved 1;
}
message GetStatVarGroupNodeRequest {
  // The stat var or stat var group ID to query for.
  string stat_var_group = 1;
  // The entities that the stat var group is associated with. The response
  // should only contain the children stat var (group) if it has data for at
  // least one of the entities.
  repeated string entities = 2;
  // Number of passed in entities that should have data for the stat var
  // (group)s that are returned
  int32 num_entities_existence = 4;
  reserved 3;
}

message GetStatVarPathRequest {
  // DCID of a stat var or a stat var group
  string id = 1;
}

message GetStatVarPathResponse {
  // A list of stat var (stat var group) DCIDs from the queried node to the
  // root of stat var hierarchy.
  // This is one path out of many possible paths in the hierarchy. When there
  // are multiple nodes to select at given level, the first one in
  // alphabetical sorted order is selected.
  repeated string path = 1;
}

message SearchStatVarRequest {
  // Query string
  string query = 1;
  // Places where the stat var and stat var groups are associated with.
  repeated string places = 2;
  // Whether or not to only return stat vars in search results.
  bool sv_only = 4;
}

message SearchStatVarResponse {
  // A ranked list of stat vars that aren't included in any of the returned stat
  // var groups.
  repeated EntityInfo stat_vars = 1;
  // Deprecated "stat_var_groups"
  reserved 2;
  // A list of unique strings in the names of the results that match the search
  // tokens
  repeated string matches = 3;
}

message StatVar {
  string dcid = 1;
  string name = 2;
}

message FilterStatVarsByPlaceRequest {
  // A list of stat vars to be filtered.
  repeated EntityInfo stat_vars = 1;
  // repeated string stat_var_names = 2;
  // Places to filter by.
  repeated string places = 2;
}

message FilterStatVarsByPlaceResponse {
  // A list of stat vars that match the places in the request.
  repeated EntityInfo stat_vars = 1;
}