// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//  **** IMPORTANT NOTE ****
//
//  The proto of BT data has to match exactly the g3 proto, including tag
//  number.

// REST API URL from the proto in this file:
// ========================================
//    /stat-var/group
//    /stat-var/search
//    /stat-var/summary
//    /stat-var/path
//    /stat-var/group/all (/place/stat-var-group)
// ========================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: stat_var.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntityStatVarExistence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set if this value is for an entity+SVG-ID key, but not for an entity+SV-ID
	// key.
	DescendentStatVarCount int32 `protobuf:"varint,2,opt,name=descendent_stat_var_count,json=descendentStatVarCount,proto3" json:"descendent_stat_var_count,omitempty"`
}

func (x *EntityStatVarExistence) Reset() {
	*x = EntityStatVarExistence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityStatVarExistence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityStatVarExistence) ProtoMessage() {}

func (x *EntityStatVarExistence) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityStatVarExistence.ProtoReflect.Descriptor instead.
func (*EntityStatVarExistence) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{0}
}

func (x *EntityStatVarExistence) GetDescendentStatVarCount() int32 {
	if x != nil {
		return x.DescendentStatVarCount
	}
	return 0
}

// Summary information about a StatVar
type StatVarSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key: type of place.  When places have multiple types, the dominant place
	// type is selected.
	PlaceTypeSummary map[string]*StatVarSummary_PlaceTypeSummary `protobuf:"bytes,1,rep,name=place_type_summary,json=placeTypeSummary,proto3" json:"place_type_summary,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Key: provenance ID
	ProvenanceSummary map[string]*StatVarSummary_ProvenanceSummary `protobuf:"bytes,2,rep,name=provenance_summary,json=provenanceSummary,proto3" json:"provenance_summary,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StatVarSummary) Reset() {
	*x = StatVarSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatVarSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatVarSummary) ProtoMessage() {}

func (x *StatVarSummary) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatVarSummary.ProtoReflect.Descriptor instead.
func (*StatVarSummary) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{1}
}

func (x *StatVarSummary) GetPlaceTypeSummary() map[string]*StatVarSummary_PlaceTypeSummary {
	if x != nil {
		return x.PlaceTypeSummary
	}
	return nil
}

func (x *StatVarSummary) GetProvenanceSummary() map[string]*StatVarSummary_ProvenanceSummary {
	if x != nil {
		return x.ProvenanceSummary
	}
	return nil
}

type StatVarGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is StatVarGroup ID.
	StatVarGroups map[string]*StatVarGroupNode `protobuf:"bytes,1,rep,name=stat_var_groups,json=statVarGroups,proto3" json:"stat_var_groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StatVarGroups) Reset() {
	*x = StatVarGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatVarGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatVarGroups) ProtoMessage() {}

func (x *StatVarGroups) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatVarGroups.ProtoReflect.Descriptor instead.
func (*StatVarGroups) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{2}
}

func (x *StatVarGroups) GetStatVarGroups() map[string]*StatVarGroupNode {
	if x != nil {
		return x.StatVarGroups
	}
	return nil
}

type StatVarGroupNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Absolute name of StatVarGroup. Typically used only for root nodes.
	AbsoluteName string `protobuf:"bytes,1,opt,name=absolute_name,json=absoluteName,proto3" json:"absolute_name,omitempty"`
	// List of children StatVar IDs directly attached to this group. If there are
	// auto-generated and curated IDs for a StatVar, we'll prefer the curated.
	ChildStatVars []*StatVarGroupNode_ChildSV `protobuf:"bytes,2,rep,name=child_stat_vars,json=childStatVars,proto3" json:"child_stat_vars,omitempty"`
	// List of children StatVarGroups that are immediate specializations.
	ChildStatVarGroups []*StatVarGroupNode_ChildSVG `protobuf:"bytes,3,rep,name=child_stat_var_groups,json=childStatVarGroups,proto3" json:"child_stat_var_groups,omitempty"`
	// Number of unique descendent stat-vars.
	DescendentStatVarCount int32 `protobuf:"varint,5,opt,name=descendent_stat_var_count,json=descendentStatVarCount,proto3" json:"descendent_stat_var_count,omitempty"`
	// List of parent StatVarGroup IDs.
	ParentStatVarGroups []string `protobuf:"bytes,101,rep,name=parent_stat_var_groups,json=parentStatVarGroups,proto3" json:"parent_stat_var_groups,omitempty"`
}

func (x *StatVarGroupNode) Reset() {
	*x = StatVarGroupNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatVarGroupNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatVarGroupNode) ProtoMessage() {}

func (x *StatVarGroupNode) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatVarGroupNode.ProtoReflect.Descriptor instead.
func (*StatVarGroupNode) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{3}
}

func (x *StatVarGroupNode) GetAbsoluteName() string {
	if x != nil {
		return x.AbsoluteName
	}
	return ""
}

func (x *StatVarGroupNode) GetChildStatVars() []*StatVarGroupNode_ChildSV {
	if x != nil {
		return x.ChildStatVars
	}
	return nil
}

func (x *StatVarGroupNode) GetChildStatVarGroups() []*StatVarGroupNode_ChildSVG {
	if x != nil {
		return x.ChildStatVarGroups
	}
	return nil
}

func (x *StatVarGroupNode) GetDescendentStatVarCount() int32 {
	if x != nil {
		return x.DescendentStatVarCount
	}
	return 0
}

func (x *StatVarGroupNode) GetParentStatVarGroups() []string {
	if x != nil {
		return x.ParentStatVarGroups
	}
	return nil
}

type GetStatVarGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []string `protobuf:"bytes,2,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *GetStatVarGroupRequest) Reset() {
	*x = GetStatVarGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatVarGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatVarGroupRequest) ProtoMessage() {}

func (x *GetStatVarGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatVarGroupRequest.ProtoReflect.Descriptor instead.
func (*GetStatVarGroupRequest) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{4}
}

func (x *GetStatVarGroupRequest) GetEntities() []string {
	if x != nil {
		return x.Entities
	}
	return nil
}

type GetStatVarGroupNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stat var or stat var group ID to query for.
	StatVarGroup string `protobuf:"bytes,1,opt,name=stat_var_group,json=statVarGroup,proto3" json:"stat_var_group,omitempty"`
	// The entities that the stat var group is associated with. The response
	// should only contain the children stat var (group) if it has data for at
	// least one of the entities.
	Entities []string `protobuf:"bytes,2,rep,name=entities,proto3" json:"entities,omitempty"`
	// Number of passed in entities that should have data for the stat var
	// (group)s that are returned
	NumEntitiesExistence int32 `protobuf:"varint,4,opt,name=num_entities_existence,json=numEntitiesExistence,proto3" json:"num_entities_existence,omitempty"`
}

func (x *GetStatVarGroupNodeRequest) Reset() {
	*x = GetStatVarGroupNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatVarGroupNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatVarGroupNodeRequest) ProtoMessage() {}

func (x *GetStatVarGroupNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatVarGroupNodeRequest.ProtoReflect.Descriptor instead.
func (*GetStatVarGroupNodeRequest) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{5}
}

func (x *GetStatVarGroupNodeRequest) GetStatVarGroup() string {
	if x != nil {
		return x.StatVarGroup
	}
	return ""
}

func (x *GetStatVarGroupNodeRequest) GetEntities() []string {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *GetStatVarGroupNodeRequest) GetNumEntitiesExistence() int32 {
	if x != nil {
		return x.NumEntitiesExistence
	}
	return 0
}

type GetStatVarPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DCID of a stat var or a stat var group
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetStatVarPathRequest) Reset() {
	*x = GetStatVarPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatVarPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatVarPathRequest) ProtoMessage() {}

func (x *GetStatVarPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatVarPathRequest.ProtoReflect.Descriptor instead.
func (*GetStatVarPathRequest) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{6}
}

func (x *GetStatVarPathRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetStatVarPathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of stat var (stat var group) DCIDs from the queried node to the
	// root of stat var hierarchy.
	// This is one path out of many possible paths in the hierarchy. When there
	// are multiple nodes to select at given level, the first one in
	// alphabetical sorted order is selected.
	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *GetStatVarPathResponse) Reset() {
	*x = GetStatVarPathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatVarPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatVarPathResponse) ProtoMessage() {}

func (x *GetStatVarPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatVarPathResponse.ProtoReflect.Descriptor instead.
func (*GetStatVarPathResponse) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{7}
}

func (x *GetStatVarPathResponse) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type SearchStatVarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query string
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Places where the stat var and stat var groups are associated with.
	Places []string `protobuf:"bytes,2,rep,name=places,proto3" json:"places,omitempty"`
	// Whether or not to only return stat vars in search results.
	SvOnly bool `protobuf:"varint,4,opt,name=sv_only,json=svOnly,proto3" json:"sv_only,omitempty"`
}

func (x *SearchStatVarRequest) Reset() {
	*x = SearchStatVarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchStatVarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStatVarRequest) ProtoMessage() {}

func (x *SearchStatVarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStatVarRequest.ProtoReflect.Descriptor instead.
func (*SearchStatVarRequest) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{8}
}

func (x *SearchStatVarRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchStatVarRequest) GetPlaces() []string {
	if x != nil {
		return x.Places
	}
	return nil
}

func (x *SearchStatVarRequest) GetSvOnly() bool {
	if x != nil {
		return x.SvOnly
	}
	return false
}

type SearchStatVarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A ranked list of stat vars that aren't included in any of the returned stat
	// var groups.
	StatVars []*EntityInfo `protobuf:"bytes,1,rep,name=stat_vars,json=statVars,proto3" json:"stat_vars,omitempty"`
	// A list of unique strings in the names of the results that match the search
	// tokens
	Matches []string `protobuf:"bytes,3,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *SearchStatVarResponse) Reset() {
	*x = SearchStatVarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchStatVarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStatVarResponse) ProtoMessage() {}

func (x *SearchStatVarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStatVarResponse.ProtoReflect.Descriptor instead.
func (*SearchStatVarResponse) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{9}
}

func (x *SearchStatVarResponse) GetStatVars() []*EntityInfo {
	if x != nil {
		return x.StatVars
	}
	return nil
}

func (x *SearchStatVarResponse) GetMatches() []string {
	if x != nil {
		return x.Matches
	}
	return nil
}

type StatVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dcid string `protobuf:"bytes,1,opt,name=dcid,proto3" json:"dcid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StatVar) Reset() {
	*x = StatVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatVar) ProtoMessage() {}

func (x *StatVar) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatVar.ProtoReflect.Descriptor instead.
func (*StatVar) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{10}
}

func (x *StatVar) GetDcid() string {
	if x != nil {
		return x.Dcid
	}
	return ""
}

func (x *StatVar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FilterStatVarsByPlaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of stat vars to be filtered.
	StatVars []*EntityInfo `protobuf:"bytes,1,rep,name=stat_vars,json=statVars,proto3" json:"stat_vars,omitempty"`
	// repeated string stat_var_names = 2;
	// Places to filter by.
	Places []string `protobuf:"bytes,2,rep,name=places,proto3" json:"places,omitempty"`
}

func (x *FilterStatVarsByPlaceRequest) Reset() {
	*x = FilterStatVarsByPlaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterStatVarsByPlaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterStatVarsByPlaceRequest) ProtoMessage() {}

func (x *FilterStatVarsByPlaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterStatVarsByPlaceRequest.ProtoReflect.Descriptor instead.
func (*FilterStatVarsByPlaceRequest) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{11}
}

func (x *FilterStatVarsByPlaceRequest) GetStatVars() []*EntityInfo {
	if x != nil {
		return x.StatVars
	}
	return nil
}

func (x *FilterStatVarsByPlaceRequest) GetPlaces() []string {
	if x != nil {
		return x.Places
	}
	return nil
}

type FilterStatVarsByPlaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of stat vars that match the places in the request.
	StatVars []*EntityInfo `protobuf:"bytes,1,rep,name=stat_vars,json=statVars,proto3" json:"stat_vars,omitempty"`
}

func (x *FilterStatVarsByPlaceResponse) Reset() {
	*x = FilterStatVarsByPlaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterStatVarsByPlaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterStatVarsByPlaceResponse) ProtoMessage() {}

func (x *FilterStatVarsByPlaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterStatVarsByPlaceResponse.ProtoReflect.Descriptor instead.
func (*FilterStatVarsByPlaceResponse) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{12}
}

func (x *FilterStatVarsByPlaceResponse) GetStatVars() []*EntityInfo {
	if x != nil {
		return x.StatVars
	}
	return nil
}

type StatVarSummary_Place struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dcid string `protobuf:"bytes,1,opt,name=dcid,proto3" json:"dcid,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StatVarSummary_Place) Reset() {
	*x = StatVarSummary_Place{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatVarSummary_Place) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatVarSummary_Place) ProtoMessage() {}

func (x *StatVarSummary_Place) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatVarSummary_Place.ProtoReflect.Descriptor instead.
func (*StatVarSummary_Place) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{1, 0}
}

func (x *StatVarSummary_Place) GetDcid() string {
	if x != nil {
		return x.Dcid
	}
	return ""
}

func (x *StatVarSummary_Place) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StatVarSummary_PlaceTypeSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of places with stats for this StatVar
	PlaceCount int32 `protobuf:"varint,4,opt,name=place_count,json=placeCount,proto3" json:"place_count,omitempty"`
	// A short (<4) list of most-populated places of this type
	TopPlaces []*StatVarSummary_Place `protobuf:"bytes,3,rep,name=top_places,json=topPlaces,proto3" json:"top_places,omitempty"`
	// Minimum observation value for places of this type
	MinValue *float64 `protobuf:"fixed64,5,opt,name=min_value,json=minValue,proto3,oneof" json:"min_value,omitempty"`
	// Maximum observation value for places of this type
	MaxValue *float64 `protobuf:"fixed64,6,opt,name=max_value,json=maxValue,proto3,oneof" json:"max_value,omitempty"`
}

func (x *StatVarSummary_PlaceTypeSummary) Reset() {
	*x = StatVarSummary_PlaceTypeSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatVarSummary_PlaceTypeSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatVarSummary_PlaceTypeSummary) ProtoMessage() {}

func (x *StatVarSummary_PlaceTypeSummary) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatVarSummary_PlaceTypeSummary.ProtoReflect.Descriptor instead.
func (*StatVarSummary_PlaceTypeSummary) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{1, 1}
}

func (x *StatVarSummary_PlaceTypeSummary) GetPlaceCount() int32 {
	if x != nil {
		return x.PlaceCount
	}
	return 0
}

func (x *StatVarSummary_PlaceTypeSummary) GetTopPlaces() []*StatVarSummary_Place {
	if x != nil {
		return x.TopPlaces
	}
	return nil
}

func (x *StatVarSummary_PlaceTypeSummary) GetMinValue() float64 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *StatVarSummary_PlaceTypeSummary) GetMaxValue() float64 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

type StatVarSummary_SeriesSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesKey *StatVarSummary_SeriesSummary_SeriesKey `protobuf:"bytes,1,opt,name=series_key,json=seriesKey,proto3" json:"series_key,omitempty"`
	// Earliest observation date of this time series type
	EarliestDate string `protobuf:"bytes,2,opt,name=earliest_date,json=earliestDate,proto3" json:"earliest_date,omitempty"`
	// Latest observation date in this time series type
	LatestDate string `protobuf:"bytes,3,opt,name=latest_date,json=latestDate,proto3" json:"latest_date,omitempty"`
	// Map of place type to PlaceTypeSummary for this time series type
	PlaceTypeSummary map[string]*StatVarSummary_PlaceTypeSummary `protobuf:"bytes,6,rep,name=place_type_summary,json=placeTypeSummary,proto3" json:"place_type_summary,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Minimum observation value of this time series type
	MinValue *float64 `protobuf:"fixed64,7,opt,name=min_value,json=minValue,proto3,oneof" json:"min_value,omitempty"`
	// Maximum observation value of this time series type
	MaxValue *float64 `protobuf:"fixed64,8,opt,name=max_value,json=maxValue,proto3,oneof" json:"max_value,omitempty"`
	// Number of observations of this time series type, might exceed INT32_MAX.
	ObservationCount float64 `protobuf:"fixed64,9,opt,name=observation_count,json=observationCount,proto3" json:"observation_count,omitempty"`
	// Number of series of this time series type, might exceed INT32_MAX.
	TimeSeriesCount float64 `protobuf:"fixed64,10,opt,name=time_series_count,json=timeSeriesCount,proto3" json:"time_series_count,omitempty"`
}

func (x *StatVarSummary_SeriesSummary) Reset() {
	*x = StatVarSummary_SeriesSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatVarSummary_SeriesSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatVarSummary_SeriesSummary) ProtoMessage() {}

func (x *StatVarSummary_SeriesSummary) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatVarSummary_SeriesSummary.ProtoReflect.Descriptor instead.
func (*StatVarSummary_SeriesSummary) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{1, 2}
}

func (x *StatVarSummary_SeriesSummary) GetSeriesKey() *StatVarSummary_SeriesSummary_SeriesKey {
	if x != nil {
		return x.SeriesKey
	}
	return nil
}

func (x *StatVarSummary_SeriesSummary) GetEarliestDate() string {
	if x != nil {
		return x.EarliestDate
	}
	return ""
}

func (x *StatVarSummary_SeriesSummary) GetLatestDate() string {
	if x != nil {
		return x.LatestDate
	}
	return ""
}

func (x *StatVarSummary_SeriesSummary) GetPlaceTypeSummary() map[string]*StatVarSummary_PlaceTypeSummary {
	if x != nil {
		return x.PlaceTypeSummary
	}
	return nil
}

func (x *StatVarSummary_SeriesSummary) GetMinValue() float64 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *StatVarSummary_SeriesSummary) GetMaxValue() float64 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *StatVarSummary_SeriesSummary) GetObservationCount() float64 {
	if x != nil {
		return x.ObservationCount
	}
	return 0
}

func (x *StatVarSummary_SeriesSummary) GetTimeSeriesCount() float64 {
	if x != nil {
		return x.TimeSeriesCount
	}
	return 0
}

type StatVarSummary_ProvenanceSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Import name
	ImportName string `protobuf:"bytes,1,opt,name=import_name,json=importName,proto3" json:"import_name,omitempty"`
	// Release frequency of this provenance
	ReleaseFrequency string `protobuf:"bytes,4,opt,name=release_frequency,json=releaseFrequency,proto3" json:"release_frequency,omitempty"`
	// SeriesSummary for each time series in this provenance
	SeriesSummary []*StatVarSummary_SeriesSummary `protobuf:"bytes,5,rep,name=series_summary,json=seriesSummary,proto3" json:"series_summary,omitempty"`
	// Number of observations from this provenance, might exceed INT32_MAX.
	ObservationCount float64 `protobuf:"fixed64,6,opt,name=observation_count,json=observationCount,proto3" json:"observation_count,omitempty"`
	// Number of time series from this provenance, might exceed INT32_MAX.
	TimeSeriesCount float64 `protobuf:"fixed64,7,opt,name=time_series_count,json=timeSeriesCount,proto3" json:"time_series_count,omitempty"`
}

func (x *StatVarSummary_ProvenanceSummary) Reset() {
	*x = StatVarSummary_ProvenanceSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatVarSummary_ProvenanceSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatVarSummary_ProvenanceSummary) ProtoMessage() {}

func (x *StatVarSummary_ProvenanceSummary) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatVarSummary_ProvenanceSummary.ProtoReflect.Descriptor instead.
func (*StatVarSummary_ProvenanceSummary) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{1, 3}
}

func (x *StatVarSummary_ProvenanceSummary) GetImportName() string {
	if x != nil {
		return x.ImportName
	}
	return ""
}

func (x *StatVarSummary_ProvenanceSummary) GetReleaseFrequency() string {
	if x != nil {
		return x.ReleaseFrequency
	}
	return ""
}

func (x *StatVarSummary_ProvenanceSummary) GetSeriesSummary() []*StatVarSummary_SeriesSummary {
	if x != nil {
		return x.SeriesSummary
	}
	return nil
}

func (x *StatVarSummary_ProvenanceSummary) GetObservationCount() float64 {
	if x != nil {
		return x.ObservationCount
	}
	return 0
}

func (x *StatVarSummary_ProvenanceSummary) GetTimeSeriesCount() float64 {
	if x != nil {
		return x.TimeSeriesCount
	}
	return 0
}

type StatVarSummary_SeriesSummary_SeriesKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Measurement method of this time series type
	MeasurementMethod string `protobuf:"bytes,1,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	// Observation period of this time series type
	ObservationPeriod string `protobuf:"bytes,2,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
	// Scaling factor of this time series type
	ScalingFactor string `protobuf:"bytes,3,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
	// Unit of this time series type
	Unit string `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	// Whether this time series type is aggregated by Data Commons
	IsDcAggregate bool `protobuf:"varint,5,opt,name=is_dc_aggregate,json=isDcAggregate,proto3" json:"is_dc_aggregate,omitempty"`
	// Whether this time series type is imputed by Data Commons
	IsDcImputed bool `protobuf:"varint,6,opt,name=is_dc_imputed,json=isDcImputed,proto3" json:"is_dc_imputed,omitempty"`
}

func (x *StatVarSummary_SeriesSummary_SeriesKey) Reset() {
	*x = StatVarSummary_SeriesSummary_SeriesKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatVarSummary_SeriesSummary_SeriesKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatVarSummary_SeriesSummary_SeriesKey) ProtoMessage() {}

func (x *StatVarSummary_SeriesSummary_SeriesKey) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatVarSummary_SeriesSummary_SeriesKey.ProtoReflect.Descriptor instead.
func (*StatVarSummary_SeriesSummary_SeriesKey) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (x *StatVarSummary_SeriesSummary_SeriesKey) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *StatVarSummary_SeriesSummary_SeriesKey) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

func (x *StatVarSummary_SeriesSummary_SeriesKey) GetScalingFactor() string {
	if x != nil {
		return x.ScalingFactor
	}
	return ""
}

func (x *StatVarSummary_SeriesSummary_SeriesKey) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *StatVarSummary_SeriesSummary_SeriesKey) GetIsDcAggregate() bool {
	if x != nil {
		return x.IsDcAggregate
	}
	return false
}

func (x *StatVarSummary_SeriesSummary_SeriesKey) GetIsDcImputed() bool {
	if x != nil {
		return x.IsDcImputed
	}
	return false
}

type StatVarGroupNode_ChildSVG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// StatVarGroup ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The specialized entity of the child StatVarGroup relative to the parent.
	// This can be used for naming when the child appears in the hierarchy.
	SpecializedEntity string `protobuf:"bytes,2,opt,name=specialized_entity,json=specializedEntity,proto3" json:"specialized_entity,omitempty"`
	// ==== Below are fields not in original cache.
	// Name suitable for display in tree.
	DisplayName string `protobuf:"bytes,101,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Number of unique descendent stat-vars.
	DescendentStatVarCount int32 `protobuf:"varint,102,opt,name=descendent_stat_var_count,json=descendentStatVarCount,proto3" json:"descendent_stat_var_count,omitempty"`
}

func (x *StatVarGroupNode_ChildSVG) Reset() {
	*x = StatVarGroupNode_ChildSVG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatVarGroupNode_ChildSVG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatVarGroupNode_ChildSVG) ProtoMessage() {}

func (x *StatVarGroupNode_ChildSVG) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatVarGroupNode_ChildSVG.ProtoReflect.Descriptor instead.
func (*StatVarGroupNode_ChildSVG) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{3, 0}
}

func (x *StatVarGroupNode_ChildSVG) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StatVarGroupNode_ChildSVG) GetSpecializedEntity() string {
	if x != nil {
		return x.SpecializedEntity
	}
	return ""
}

func (x *StatVarGroupNode_ChildSVG) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *StatVarGroupNode_ChildSVG) GetDescendentStatVarCount() int32 {
	if x != nil {
		return x.DescendentStatVarCount
	}
	return 0
}

type StatVarGroupNode_ChildSV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// StatVar ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name suitable for search.
	SearchName string `protobuf:"bytes,2,opt,name=search_name,json=searchName,proto3" json:"search_name,omitempty"`
	// Names suitable for search.
	SearchNames []string `protobuf:"bytes,4,rep,name=search_names,json=searchNames,proto3" json:"search_names,omitempty"`
	// Name suitable for display in tree.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Serialized string containing StatVar definition.
	//
	// The format is P=V delimited by commas. The required properties are
	// abbreviated (populationType is 'pt', statType is 'st', etc).  For
	// example, "median income of women" is:
	//
	//	"st=medianValue,pt=Person,mp=income,gender=Female"
	//
	// When statType is "measuredValue" (default), it is skipped.
	Definition string `protobuf:"bytes,5,opt,name=definition,proto3" json:"definition,omitempty"`
	// Whether there is a data for this stat var
	HasData bool `protobuf:"varint,101,opt,name=has_data,json=hasData,proto3" json:"has_data,omitempty"`
}

func (x *StatVarGroupNode_ChildSV) Reset() {
	*x = StatVarGroupNode_ChildSV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_var_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatVarGroupNode_ChildSV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatVarGroupNode_ChildSV) ProtoMessage() {}

func (x *StatVarGroupNode_ChildSV) ProtoReflect() protoreflect.Message {
	mi := &file_stat_var_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatVarGroupNode_ChildSV.ProtoReflect.Descriptor instead.
func (*StatVarGroupNode_ChildSV) Descriptor() ([]byte, []int) {
	return file_stat_var_proto_rawDescGZIP(), []int{3, 1}
}

func (x *StatVarGroupNode_ChildSV) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StatVarGroupNode_ChildSV) GetSearchName() string {
	if x != nil {
		return x.SearchName
	}
	return ""
}

func (x *StatVarGroupNode_ChildSV) GetSearchNames() []string {
	if x != nil {
		return x.SearchNames
	}
	return nil
}

func (x *StatVarGroupNode_ChildSV) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *StatVarGroupNode_ChildSV) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *StatVarGroupNode_ChildSV) GetHasData() bool {
	if x != nil {
		return x.HasData
	}
	return false
}

var File_stat_var_proto protoreflect.FileDescriptor

var file_stat_var_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x1a, 0x0c, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x16, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xb8, 0x0e, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x56,
	0x61, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x5f, 0x0a, 0x12, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x61, 0x0a, 0x12, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x35, 0x0a,
	0x05, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x63, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x1a, 0xe1, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x6f,
	0x70, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x56, 0x61, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x1a, 0xc3, 0x06, 0x0a, 0x0d, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x56, 0x61, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x4b, 0x65, 0x79, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0xf0, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x63,
	0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x44, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x63, 0x49, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x64, 0x1a, 0x71, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x56, 0x61, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x1a, 0x98,
	0x02, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x50, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x1a, 0x71, 0x0a, 0x15, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x73, 0x0a, 0x16,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56,
	0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x56, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x5f, 0x0a, 0x12, 0x53, 0x74,
	0x61, 0x74, 0x56, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbf, 0x05, 0x0a, 0x10,
	0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x56, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x53, 0x56, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x56, 0x61, 0x72, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x56, 0x47, 0x52, 0x12, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x39, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x56, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a,
	0xa7, 0x01, 0x0a, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x56, 0x47, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x12,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x19, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x56, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xbb, 0x01, 0x0a, 0x07, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x53, 0x56, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x68, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x3a, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x9a, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x5f, 0x76, 0x61, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75,
	0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x56, 0x61, 0x72, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x2c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x5d, 0x0a,
	0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x76, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x76, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x6d, 0x0a, 0x15,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x31, 0x0a, 0x07, 0x53,
	0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x63, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6c,
	0x0a, 0x1c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73,
	0x42, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x56, 0x61, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x1d,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73, 0x42, 0x79,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x56,
	0x61, 0x72, 0x73, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x67,
	0x2f, 0x6d, 0x69, 0x78, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stat_var_proto_rawDescOnce sync.Once
	file_stat_var_proto_rawDescData = file_stat_var_proto_rawDesc
)

func file_stat_var_proto_rawDescGZIP() []byte {
	file_stat_var_proto_rawDescOnce.Do(func() {
		file_stat_var_proto_rawDescData = protoimpl.X.CompressGZIP(file_stat_var_proto_rawDescData)
	})
	return file_stat_var_proto_rawDescData
}

var file_stat_var_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_stat_var_proto_goTypes = []interface{}{
	(*EntityStatVarExistence)(nil),                 // 0: datacommons.EntityStatVarExistence
	(*StatVarSummary)(nil),                         // 1: datacommons.StatVarSummary
	(*StatVarGroups)(nil),                          // 2: datacommons.StatVarGroups
	(*StatVarGroupNode)(nil),                       // 3: datacommons.StatVarGroupNode
	(*GetStatVarGroupRequest)(nil),                 // 4: datacommons.GetStatVarGroupRequest
	(*GetStatVarGroupNodeRequest)(nil),             // 5: datacommons.GetStatVarGroupNodeRequest
	(*GetStatVarPathRequest)(nil),                  // 6: datacommons.GetStatVarPathRequest
	(*GetStatVarPathResponse)(nil),                 // 7: datacommons.GetStatVarPathResponse
	(*SearchStatVarRequest)(nil),                   // 8: datacommons.SearchStatVarRequest
	(*SearchStatVarResponse)(nil),                  // 9: datacommons.SearchStatVarResponse
	(*StatVar)(nil),                                // 10: datacommons.StatVar
	(*FilterStatVarsByPlaceRequest)(nil),           // 11: datacommons.FilterStatVarsByPlaceRequest
	(*FilterStatVarsByPlaceResponse)(nil),          // 12: datacommons.FilterStatVarsByPlaceResponse
	(*StatVarSummary_Place)(nil),                   // 13: datacommons.StatVarSummary.Place
	(*StatVarSummary_PlaceTypeSummary)(nil),        // 14: datacommons.StatVarSummary.PlaceTypeSummary
	(*StatVarSummary_SeriesSummary)(nil),           // 15: datacommons.StatVarSummary.SeriesSummary
	(*StatVarSummary_ProvenanceSummary)(nil),       // 16: datacommons.StatVarSummary.ProvenanceSummary
	nil,                                            // 17: datacommons.StatVarSummary.PlaceTypeSummaryEntry
	nil,                                            // 18: datacommons.StatVarSummary.ProvenanceSummaryEntry
	(*StatVarSummary_SeriesSummary_SeriesKey)(nil), // 19: datacommons.StatVarSummary.SeriesSummary.SeriesKey
	nil,                               // 20: datacommons.StatVarSummary.SeriesSummary.PlaceTypeSummaryEntry
	nil,                               // 21: datacommons.StatVarGroups.StatVarGroupsEntry
	(*StatVarGroupNode_ChildSVG)(nil), // 22: datacommons.StatVarGroupNode.ChildSVG
	(*StatVarGroupNode_ChildSV)(nil),  // 23: datacommons.StatVarGroupNode.ChildSV
	(*EntityInfo)(nil),                // 24: datacommons.EntityInfo
}
var file_stat_var_proto_depIdxs = []int32{
	17, // 0: datacommons.StatVarSummary.place_type_summary:type_name -> datacommons.StatVarSummary.PlaceTypeSummaryEntry
	18, // 1: datacommons.StatVarSummary.provenance_summary:type_name -> datacommons.StatVarSummary.ProvenanceSummaryEntry
	21, // 2: datacommons.StatVarGroups.stat_var_groups:type_name -> datacommons.StatVarGroups.StatVarGroupsEntry
	23, // 3: datacommons.StatVarGroupNode.child_stat_vars:type_name -> datacommons.StatVarGroupNode.ChildSV
	22, // 4: datacommons.StatVarGroupNode.child_stat_var_groups:type_name -> datacommons.StatVarGroupNode.ChildSVG
	24, // 5: datacommons.SearchStatVarResponse.stat_vars:type_name -> datacommons.EntityInfo
	24, // 6: datacommons.FilterStatVarsByPlaceRequest.stat_vars:type_name -> datacommons.EntityInfo
	24, // 7: datacommons.FilterStatVarsByPlaceResponse.stat_vars:type_name -> datacommons.EntityInfo
	13, // 8: datacommons.StatVarSummary.PlaceTypeSummary.top_places:type_name -> datacommons.StatVarSummary.Place
	19, // 9: datacommons.StatVarSummary.SeriesSummary.series_key:type_name -> datacommons.StatVarSummary.SeriesSummary.SeriesKey
	20, // 10: datacommons.StatVarSummary.SeriesSummary.place_type_summary:type_name -> datacommons.StatVarSummary.SeriesSummary.PlaceTypeSummaryEntry
	15, // 11: datacommons.StatVarSummary.ProvenanceSummary.series_summary:type_name -> datacommons.StatVarSummary.SeriesSummary
	14, // 12: datacommons.StatVarSummary.PlaceTypeSummaryEntry.value:type_name -> datacommons.StatVarSummary.PlaceTypeSummary
	16, // 13: datacommons.StatVarSummary.ProvenanceSummaryEntry.value:type_name -> datacommons.StatVarSummary.ProvenanceSummary
	14, // 14: datacommons.StatVarSummary.SeriesSummary.PlaceTypeSummaryEntry.value:type_name -> datacommons.StatVarSummary.PlaceTypeSummary
	3,  // 15: datacommons.StatVarGroups.StatVarGroupsEntry.value:type_name -> datacommons.StatVarGroupNode
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_stat_var_proto_init() }
func file_stat_var_proto_init() {
	if File_stat_var_proto != nil {
		return
	}
	file_entity_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_stat_var_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityStatVarExistence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatVarSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatVarGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatVarGroupNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatVarGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatVarGroupNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatVarPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatVarPathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchStatVarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchStatVarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterStatVarsByPlaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterStatVarsByPlaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatVarSummary_Place); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatVarSummary_PlaceTypeSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatVarSummary_SeriesSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatVarSummary_ProvenanceSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatVarSummary_SeriesSummary_SeriesKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatVarGroupNode_ChildSVG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_var_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatVarGroupNode_ChildSV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_stat_var_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_stat_var_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stat_var_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stat_var_proto_goTypes,
		DependencyIndexes: file_stat_var_proto_depIdxs,
		MessageInfos:      file_stat_var_proto_msgTypes,
	}.Build()
	File_stat_var_proto = out.File
	file_stat_var_proto_rawDesc = nil
	file_stat_var_proto_goTypes = nil
	file_stat_var_proto_depIdxs = nil
}
