// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//  **** IMPORTANT NOTE ****
//
//  The proto of BT data has to match exactly the g3 proto, including tag
//  number.

// REST API URL from the proto in this file:
// ========================================
//    /bulk/stats
//    /stat/all
//    /stat/series
//    /stat/value
// ========================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: stat.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Facet contains the source and measurement information for a
// statistical observation.
type Facet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImportName        string `protobuf:"bytes,1,opt,name=import_name,json=importName,proto3" json:"import_name,omitempty"`
	ProvenanceUrl     string `protobuf:"bytes,2,opt,name=provenance_url,json=provenanceUrl,proto3" json:"provenance_url,omitempty"`
	MeasurementMethod string `protobuf:"bytes,3,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	ObservationPeriod string `protobuf:"bytes,4,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
	ScalingFactor     string `protobuf:"bytes,5,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
	Unit              string `protobuf:"bytes,6,opt,name=unit,proto3" json:"unit,omitempty"`
	IsDcAggregate     bool   `protobuf:"varint,7,opt,name=is_dc_aggregate,json=isDcAggregate,proto3" json:"is_dc_aggregate,omitempty"`
	IsDcImputed       bool   `protobuf:"varint,8,opt,name=is_dc_imputed,json=isDcImputed,proto3" json:"is_dc_imputed,omitempty"`
}

func (x *Facet) Reset() {
	*x = Facet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Facet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facet) ProtoMessage() {}

func (x *Facet) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facet.ProtoReflect.Descriptor instead.
func (*Facet) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{0}
}

func (x *Facet) GetImportName() string {
	if x != nil {
		return x.ImportName
	}
	return ""
}

func (x *Facet) GetProvenanceUrl() string {
	if x != nil {
		return x.ProvenanceUrl
	}
	return ""
}

func (x *Facet) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *Facet) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

func (x *Facet) GetScalingFactor() string {
	if x != nil {
		return x.ScalingFactor
	}
	return ""
}

func (x *Facet) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Facet) GetIsDcAggregate() bool {
	if x != nil {
		return x.IsDcAggregate
	}
	return false
}

func (x *Facet) GetIsDcImputed() bool {
	if x != nil {
		return x.IsDcImputed
	}
	return false
}

type Facets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facets []*Facet `protobuf:"bytes,1,rep,name=facets,proto3" json:"facets,omitempty"`
}

func (x *Facets) Reset() {
	*x = Facets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Facets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facets) ProtoMessage() {}

func (x *Facets) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facets.ProtoReflect.Descriptor instead.
func (*Facets) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{1}
}

func (x *Facets) GetFacets() []*Facet {
	if x != nil {
		return x.Facets
	}
	return nil
}

// PlaceVariableFacet contains the source and measurement information for a set
// of statistical observations about a place and variable.
type PlaceVariableFacet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Facet *Facet `protobuf:"bytes,1,opt,name=facet,proto3" json:"facet,omitempty"`
	// Number of observations for given place + variable + Facet.
	ObsCount int32 `protobuf:"varint,2,opt,name=obs_count,json=obsCount,proto3" json:"obs_count,omitempty"`
	// Latest observation date.
	LatestDate string `protobuf:"bytes,3,opt,name=latest_date,json=latestDate,proto3" json:"latest_date,omitempty"`
	// Earliest observation date.
	EarliestDate string `protobuf:"bytes,4,opt,name=earliest_date,json=earliestDate,proto3" json:"earliest_date,omitempty"`
	// Id of the facet.
	FacetId string `protobuf:"bytes,5,opt,name=facet_id,json=facetId,proto3" json:"facet_id,omitempty"`
}

func (x *PlaceVariableFacet) Reset() {
	*x = PlaceVariableFacet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceVariableFacet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceVariableFacet) ProtoMessage() {}

func (x *PlaceVariableFacet) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceVariableFacet.ProtoReflect.Descriptor instead.
func (*PlaceVariableFacet) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{2}
}

func (x *PlaceVariableFacet) GetFacet() *Facet {
	if x != nil {
		return x.Facet
	}
	return nil
}

func (x *PlaceVariableFacet) GetObsCount() int32 {
	if x != nil {
		return x.ObsCount
	}
	return 0
}

func (x *PlaceVariableFacet) GetLatestDate() string {
	if x != nil {
		return x.LatestDate
	}
	return ""
}

func (x *PlaceVariableFacet) GetEarliestDate() string {
	if x != nil {
		return x.EarliestDate
	}
	return ""
}

func (x *PlaceVariableFacet) GetFacetId() string {
	if x != nil {
		return x.FacetId
	}
	return ""
}

type PlaceVariableFacets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaceVariableFacets []*PlaceVariableFacet `protobuf:"bytes,1,rep,name=place_variable_facets,json=placeVariableFacets,proto3" json:"place_variable_facets,omitempty"`
}

func (x *PlaceVariableFacets) Reset() {
	*x = PlaceVariableFacets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceVariableFacets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceVariableFacets) ProtoMessage() {}

func (x *PlaceVariableFacets) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceVariableFacets.ProtoReflect.Descriptor instead.
func (*PlaceVariableFacets) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{3}
}

func (x *PlaceVariableFacets) GetPlaceVariableFacets() []*PlaceVariableFacet {
	if x != nil {
		return x.PlaceVariableFacets
	}
	return nil
}

type PointStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// date in IOS-8601 format
	Date  string   `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Value *float64 `protobuf:"fixed64,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Full metadata of the stat. This is set when the proto is used statalone,
	// ex, in place page cache.
	Metadata *Facet `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Hash of the metadata, this is to be used together with a map from
	// the hash to the full metatdata. This is set in /stat/set/within-place/*
	// APIs.
	MetaHash string `protobuf:"bytes,4,opt,name=meta_hash,json=metaHash,proto3" json:"meta_hash,omitempty"`
	// Same as meta_hash, used in V1 API.
	Facet string `protobuf:"bytes,5,opt,name=facet,proto3" json:"facet,omitempty"`
}

func (x *PointStat) Reset() {
	*x = PointStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointStat) ProtoMessage() {}

func (x *PointStat) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointStat.ProtoReflect.Descriptor instead.
func (*PointStat) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{4}
}

func (x *PointStat) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *PointStat) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PointStat) GetMetadata() *Facet {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PointStat) GetMetaHash() string {
	if x != nil {
		return x.MetaHash
	}
	return ""
}

func (x *PointStat) GetFacet() string {
	if x != nil {
		return x.Facet
	}
	return ""
}

type SourceSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val               map[string]float64 `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MeasurementMethod string             `protobuf:"bytes,3,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	ObservationPeriod string             `protobuf:"bytes,4,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
	ImportName        string             `protobuf:"bytes,5,opt,name=import_name,json=importName,proto3" json:"import_name,omitempty"`
	ProvenanceDomain  string             `protobuf:"bytes,6,opt,name=provenance_domain,json=provenanceDomain,proto3" json:"provenance_domain,omitempty"`
	ScalingFactor     string             `protobuf:"bytes,7,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
	Unit              string             `protobuf:"bytes,8,opt,name=unit,proto3" json:"unit,omitempty"`
	IsDcAggregate     bool               `protobuf:"varint,9,opt,name=is_dc_aggregate,json=isDcAggregate,proto3" json:"is_dc_aggregate,omitempty"`
	ProvenanceUrl     string             `protobuf:"bytes,10,opt,name=provenance_url,json=provenanceUrl,proto3" json:"provenance_url,omitempty"`
	// Only used for latest date obs collection.
	PlaceToLatestDate map[string]string `protobuf:"bytes,11,rep,name=place_to_latest_date,json=placeToLatestDate,proto3" json:"place_to_latest_date,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsDcImputed       bool              `protobuf:"varint,13,opt,name=is_dc_imputed,json=isDcImputed,proto3" json:"is_dc_imputed,omitempty"`
}

func (x *SourceSeries) Reset() {
	*x = SourceSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceSeries) ProtoMessage() {}

func (x *SourceSeries) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceSeries.ProtoReflect.Descriptor instead.
func (*SourceSeries) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{5}
}

func (x *SourceSeries) GetVal() map[string]float64 {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *SourceSeries) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *SourceSeries) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

func (x *SourceSeries) GetImportName() string {
	if x != nil {
		return x.ImportName
	}
	return ""
}

func (x *SourceSeries) GetProvenanceDomain() string {
	if x != nil {
		return x.ProvenanceDomain
	}
	return ""
}

func (x *SourceSeries) GetScalingFactor() string {
	if x != nil {
		return x.ScalingFactor
	}
	return ""
}

func (x *SourceSeries) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *SourceSeries) GetIsDcAggregate() bool {
	if x != nil {
		return x.IsDcAggregate
	}
	return false
}

func (x *SourceSeries) GetProvenanceUrl() string {
	if x != nil {
		return x.ProvenanceUrl
	}
	return ""
}

func (x *SourceSeries) GetPlaceToLatestDate() map[string]string {
	if x != nil {
		return x.PlaceToLatestDate
	}
	return nil
}

func (x *SourceSeries) GetIsDcImputed() bool {
	if x != nil {
		return x.IsDcImputed
	}
	return false
}

// Represents a time series from a source.
type Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map from date to stat value.
	Val map[string]float64 `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// Series metadata.
	Metadata *Facet `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Series) Reset() {
	*x = Series{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Series) ProtoMessage() {}

func (x *Series) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Series.ProtoReflect.Descriptor instead.
func (*Series) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{6}
}

func (x *Series) GetVal() map[string]float64 {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *Series) GetMetadata() *Facet {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Represents observation time series data.
type ObsTimeSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaceName    string          `protobuf:"bytes,3,opt,name=place_name,json=placeName,proto3" json:"place_name,omitempty"`
	PlaceDcid    string          `protobuf:"bytes,5,opt,name=place_dcid,json=placeDcid,proto3" json:"place_dcid,omitempty"` // Only set if the key uses mid.
	SourceSeries []*SourceSeries `protobuf:"bytes,6,rep,name=source_series,json=sourceSeries,proto3" json:"source_series,omitempty"`
}

func (x *ObsTimeSeries) Reset() {
	*x = ObsTimeSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsTimeSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsTimeSeries) ProtoMessage() {}

func (x *ObsTimeSeries) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsTimeSeries.ProtoReflect.Descriptor instead.
func (*ObsTimeSeries) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{7}
}

func (x *ObsTimeSeries) GetPlaceName() string {
	if x != nil {
		return x.PlaceName
	}
	return ""
}

func (x *ObsTimeSeries) GetPlaceDcid() string {
	if x != nil {
		return x.PlaceDcid
	}
	return ""
}

func (x *ObsTimeSeries) GetSourceSeries() []*SourceSeries {
	if x != nil {
		return x.SourceSeries
	}
	return nil
}

// A collection of observation values for various places with the same parent
// and place type, for given measured property, observation period, stat type,
// observation date, pop type, and an optional list of pop PVs.
type ObsCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCohorts []*SourceSeries `protobuf:"bytes,5,rep,name=source_cohorts,json=sourceCohorts,proto3" json:"source_cohorts,omitempty"`
}

func (x *ObsCollection) Reset() {
	*x = ObsCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsCollection) ProtoMessage() {}

func (x *ObsCollection) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsCollection.ProtoReflect.Descriptor instead.
func (*ObsCollection) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{8}
}

func (x *ObsCollection) GetSourceCohorts() []*SourceSeries {
	if x != nil {
		return x.SourceCohorts
	}
	return nil
}

// Wrapper for observation data.
type ChartStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*ChartStore_ObsTimeSeries
	//	*ChartStore_ObsCollection
	Val isChartStore_Val `protobuf_oneof:"val"`
}

func (x *ChartStore) Reset() {
	*x = ChartStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartStore) ProtoMessage() {}

func (x *ChartStore) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartStore.ProtoReflect.Descriptor instead.
func (*ChartStore) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{9}
}

func (m *ChartStore) GetVal() isChartStore_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *ChartStore) GetObsTimeSeries() *ObsTimeSeries {
	if x, ok := x.GetVal().(*ChartStore_ObsTimeSeries); ok {
		return x.ObsTimeSeries
	}
	return nil
}

func (x *ChartStore) GetObsCollection() *ObsCollection {
	if x, ok := x.GetVal().(*ChartStore_ObsCollection); ok {
		return x.ObsCollection
	}
	return nil
}

type isChartStore_Val interface {
	isChartStore_Val()
}

type ChartStore_ObsTimeSeries struct {
	ObsTimeSeries *ObsTimeSeries `protobuf:"bytes,1,opt,name=obs_time_series,json=obsTimeSeries,proto3,oneof"`
}

type ChartStore_ObsCollection struct {
	ObsCollection *ObsCollection `protobuf:"bytes,2,opt,name=obs_collection,json=obsCollection,proto3,oneof"`
}

func (*ChartStore_ObsTimeSeries) isChartStore_Val() {}

func (*ChartStore_ObsCollection) isChartStore_Val() {}

// TODO(shifucun): deprecate this and use StatVarSeries when migrating
// /stat/all to v1.
type PlaceStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is stat var dcid.
	StatVarData map[string]*ObsTimeSeries `protobuf:"bytes,3,rep,name=stat_var_data,json=statVarData,proto3" json:"stat_var_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlaceStat) Reset() {
	*x = PlaceStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceStat) ProtoMessage() {}

func (x *PlaceStat) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceStat.ProtoReflect.Descriptor instead.
func (*PlaceStat) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{10}
}

func (x *PlaceStat) GetStatVarData() map[string]*ObsTimeSeries {
	if x != nil {
		return x.StatVarData
	}
	return nil
}

// Hold mapping from stat var id to Series struct. This is different from
// StatVarObsSeries that the "Series" is processed time series with metadata
// while "ObsTimeSeries" is the raw series from cache.
type StatVarSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is stat var dcid.
	Data map[string]*Series `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StatVarSeries) Reset() {
	*x = StatVarSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatVarSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatVarSeries) ProtoMessage() {}

func (x *StatVarSeries) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatVarSeries.ProtoReflect.Descriptor instead.
func (*StatVarSeries) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{11}
}

func (x *StatVarSeries) GetData() map[string]*Series {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request message for GetStats.
type GetStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dcids of the place.
	Place []string `protobuf:"bytes,1,rep,name=place,proto3" json:"place,omitempty"`
	// The dcid of the StatisticalVariable.
	StatsVar string `protobuf:"bytes,2,opt,name=stats_var,json=statsVar,proto3" json:"stats_var,omitempty"`
	// (Optional) The measurement method of the observation. If not specified,
	// stats series with any measurement methods could be returned.
	MeasurementMethod string `protobuf:"bytes,4,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	// (Optional) The unit of the observation. If not specified, stats series with
	// any unit could be returned.
	Unit string `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// (Optional) The observation period of the observation. If not specified,
	// stats series with any observation period could be returned.
	ObservationPeriod string `protobuf:"bytes,6,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
	// (optional) scaling factor of the observation.
	ScalingFactor string `protobuf:"bytes,7,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
}

func (x *GetStatsRequest) Reset() {
	*x = GetStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsRequest) ProtoMessage() {}

func (x *GetStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsRequest.ProtoReflect.Descriptor instead.
func (*GetStatsRequest) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{12}
}

func (x *GetStatsRequest) GetPlace() []string {
	if x != nil {
		return x.Place
	}
	return nil
}

func (x *GetStatsRequest) GetStatsVar() string {
	if x != nil {
		return x.StatsVar
	}
	return ""
}

func (x *GetStatsRequest) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *GetStatsRequest) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *GetStatsRequest) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

func (x *GetStatsRequest) GetScalingFactor() string {
	if x != nil {
		return x.ScalingFactor
	}
	return ""
}

// Response of GetStats
type GetStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JSON payload.
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GetStatsResponse) Reset() {
	*x = GetStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsResponse) ProtoMessage() {}

func (x *GetStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsResponse.ProtoReflect.Descriptor instead.
func (*GetStatsResponse) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{13}
}

func (x *GetStatsResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

// Request for GetStat service.
type GetStatValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dcid of the place.
	Place string `protobuf:"bytes,1,opt,name=place,proto3" json:"place,omitempty"`
	// dcid of the stat var.
	StatVar string `protobuf:"bytes,2,opt,name=stat_var,json=statVar,proto3" json:"stat_var,omitempty"`
	// (optional) date of the stat. The latest date will be used if unspecified.
	Date string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	// (optional) measurement method of the observation, ex: "CensusACS5yrSurvey".
	MeasurementMethod string `protobuf:"bytes,4,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	// (optional) observation period of the observation, ex: "P1Y".
	ObservationPeriod string `protobuf:"bytes,5,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
	// (optional) unit of the observation.
	Unit string `protobuf:"bytes,6,opt,name=unit,proto3" json:"unit,omitempty"`
	// (optional) scaling factor of the observation.
	ScalingFactor string `protobuf:"bytes,7,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
}

func (x *GetStatValueRequest) Reset() {
	*x = GetStatValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatValueRequest) ProtoMessage() {}

func (x *GetStatValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatValueRequest.ProtoReflect.Descriptor instead.
func (*GetStatValueRequest) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{14}
}

func (x *GetStatValueRequest) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *GetStatValueRequest) GetStatVar() string {
	if x != nil {
		return x.StatVar
	}
	return ""
}

func (x *GetStatValueRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetStatValueRequest) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *GetStatValueRequest) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

func (x *GetStatValueRequest) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *GetStatValueRequest) GetScalingFactor() string {
	if x != nil {
		return x.ScalingFactor
	}
	return ""
}

type GetStatValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *float64 `protobuf:"fixed64,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *GetStatValueResponse) Reset() {
	*x = GetStatValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatValueResponse) ProtoMessage() {}

func (x *GetStatValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatValueResponse.ProtoReflect.Descriptor instead.
func (*GetStatValueResponse) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{15}
}

func (x *GetStatValueResponse) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// Request for GetStatSeries service.
type GetStatSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dcid of the place.
	Place string `protobuf:"bytes,1,opt,name=place,proto3" json:"place,omitempty"`
	// dcid of the stat var.
	StatVar string `protobuf:"bytes,2,opt,name=stat_var,json=statVar,proto3" json:"stat_var,omitempty"`
	// (optional) measurement method of the observation, ex: "CensusACS5yrSurvey".
	MeasurementMethod string `protobuf:"bytes,3,opt,name=measurement_method,json=measurementMethod,proto3" json:"measurement_method,omitempty"`
	// (optional) observation period of the observation, ex: "P1Y".
	ObservationPeriod string `protobuf:"bytes,4,opt,name=observation_period,json=observationPeriod,proto3" json:"observation_period,omitempty"`
	// (optional) unit of the observation.
	Unit string `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// (optional) scaling factor of the observation.
	ScalingFactor string `protobuf:"bytes,6,opt,name=scaling_factor,json=scalingFactor,proto3" json:"scaling_factor,omitempty"`
}

func (x *GetStatSeriesRequest) Reset() {
	*x = GetStatSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatSeriesRequest) ProtoMessage() {}

func (x *GetStatSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatSeriesRequest.ProtoReflect.Descriptor instead.
func (*GetStatSeriesRequest) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{16}
}

func (x *GetStatSeriesRequest) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *GetStatSeriesRequest) GetStatVar() string {
	if x != nil {
		return x.StatVar
	}
	return ""
}

func (x *GetStatSeriesRequest) GetMeasurementMethod() string {
	if x != nil {
		return x.MeasurementMethod
	}
	return ""
}

func (x *GetStatSeriesRequest) GetObservationPeriod() string {
	if x != nil {
		return x.ObservationPeriod
	}
	return ""
}

func (x *GetStatSeriesRequest) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *GetStatSeriesRequest) GetScalingFactor() string {
	if x != nil {
		return x.ScalingFactor
	}
	return ""
}

// Response for GetStatSeries service.
type GetStatSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map from ISO date to stat value.
	Series map[string]float64 `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *GetStatSeriesResponse) Reset() {
	*x = GetStatSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatSeriesResponse) ProtoMessage() {}

func (x *GetStatSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatSeriesResponse.ProtoReflect.Descriptor instead.
func (*GetStatSeriesResponse) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{17}
}

func (x *GetStatSeriesResponse) GetSeries() map[string]float64 {
	if x != nil {
		return x.Series
	}
	return nil
}

// Request for GetStatAll service.
type GetStatAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dcids of the place.
	Places []string `protobuf:"bytes,1,rep,name=places,proto3" json:"places,omitempty"`
	// dcids of the stat var.
	StatVars []string `protobuf:"bytes,2,rep,name=stat_vars,json=statVars,proto3" json:"stat_vars,omitempty"`
}

func (x *GetStatAllRequest) Reset() {
	*x = GetStatAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatAllRequest) ProtoMessage() {}

func (x *GetStatAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatAllRequest.ProtoReflect.Descriptor instead.
func (*GetStatAllRequest) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{18}
}

func (x *GetStatAllRequest) GetPlaces() []string {
	if x != nil {
		return x.Places
	}
	return nil
}

func (x *GetStatAllRequest) GetStatVars() []string {
	if x != nil {
		return x.StatVars
	}
	return nil
}

// Response for GetStatAll service.
//
// The response is a two level map, with the first level keyed by place dcid,
// and the second level keyed by the stat var dcid.
// Each leaf object contains multiple source series with <date, value> object
// and observation metadata.
//
// The response is transcoded by esp:
// https://cloud.google.com/endpoints/docs/grpc/grpc-service-config Example
// response after esp transcoding is like below.
//
//	{
//	  placeData: {
//	    "geoId/01": {
//	      statVarData: {
//	        "statvar1": {
//	          "placeName": "City of Mountain View",
//	          "sourceSeries": [
//	            {
//	              "val": {
//	                "2008": 2116,
//	                "2009": 2155,
//	                "2010": 1633,
//	                "2011": 1509,
//	                "2012": 1581,
//	                "2013": 1867,
//	                "2014": 1770,
//	                "2015": 2201,
//	                "2016": 1913,
//	                "2017": 2138
//	              },
//	              "observationPeriod": "P1Y",
//	              "importName": "FBIGovCrime",
//	              "provenanceDomain": "fbi.gov"
//	            }
//	          ]
//	        },
//	      }
//	    },
//	    "geoId/02": {
//	      statVarData: {
//	        "statvar3": {...},
//	      }
//	    }
//	  }
//	}
type GetStatAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaceData map[string]*PlaceStat `protobuf:"bytes,1,rep,name=place_data,json=placeData,proto3" json:"place_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetStatAllResponse) Reset() {
	*x = GetStatAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatAllResponse) ProtoMessage() {}

func (x *GetStatAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatAllResponse.ProtoReflect.Descriptor instead.
func (*GetStatAllResponse) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{19}
}

func (x *GetStatAllResponse) GetPlaceData() map[string]*PlaceStat {
	if x != nil {
		return x.PlaceData
	}
	return nil
}

type StatDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map from date to the number of places.
	DatePlaceCount map[string]float64 `protobuf:"bytes,1,rep,name=date_place_count,json=datePlaceCount,proto3" json:"date_place_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Metadata       *Facet             `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *StatDate) Reset() {
	*x = StatDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatDate) ProtoMessage() {}

func (x *StatDate) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatDate.ProtoReflect.Descriptor instead.
func (*StatDate) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{20}
}

func (x *StatDate) GetDatePlaceCount() map[string]float64 {
	if x != nil {
		return x.DatePlaceCount
	}
	return nil
}

func (x *StatDate) GetMetadata() *Facet {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type StatDateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatDate []*StatDate `protobuf:"bytes,1,rep,name=stat_date,json=statDate,proto3" json:"stat_date,omitempty"`
}

func (x *StatDateList) Reset() {
	*x = StatDateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatDateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatDateList) ProtoMessage() {}

func (x *StatDateList) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatDateList.ProtoReflect.Descriptor instead.
func (*StatDateList) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{21}
}

func (x *StatDateList) GetStatDate() []*StatDate {
	if x != nil {
		return x.StatDate
	}
	return nil
}

type GetStatDateWithinPlaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AncestorPlace  string   `protobuf:"bytes,1,opt,name=ancestor_place,json=ancestorPlace,proto3" json:"ancestor_place,omitempty"`
	ChildPlaceType string   `protobuf:"bytes,2,opt,name=child_place_type,json=childPlaceType,proto3" json:"child_place_type,omitempty"`
	StatVars       []string `protobuf:"bytes,3,rep,name=stat_vars,json=statVars,proto3" json:"stat_vars,omitempty"`
}

func (x *GetStatDateWithinPlaceRequest) Reset() {
	*x = GetStatDateWithinPlaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatDateWithinPlaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatDateWithinPlaceRequest) ProtoMessage() {}

func (x *GetStatDateWithinPlaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatDateWithinPlaceRequest.ProtoReflect.Descriptor instead.
func (*GetStatDateWithinPlaceRequest) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{22}
}

func (x *GetStatDateWithinPlaceRequest) GetAncestorPlace() string {
	if x != nil {
		return x.AncestorPlace
	}
	return ""
}

func (x *GetStatDateWithinPlaceRequest) GetChildPlaceType() string {
	if x != nil {
		return x.ChildPlaceType
	}
	return ""
}

func (x *GetStatDateWithinPlaceRequest) GetStatVars() []string {
	if x != nil {
		return x.StatVars
	}
	return nil
}

type GetStatDateWithinPlaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Keyed by stat var.
	Data map[string]*StatDateList `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetStatDateWithinPlaceResponse) Reset() {
	*x = GetStatDateWithinPlaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatDateWithinPlaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatDateWithinPlaceResponse) ProtoMessage() {}

func (x *GetStatDateWithinPlaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stat_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatDateWithinPlaceResponse.ProtoReflect.Descriptor instead.
func (*GetStatDateWithinPlaceResponse) Descriptor() ([]byte, []int) {
	return file_stat_proto_rawDescGZIP(), []int{23}
}

func (x *GetStatDateWithinPlaceResponse) GetData() map[string]*StatDateList {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_stat_proto protoreflect.FileDescriptor

var file_stat_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x22, 0xb4, 0x02, 0x0a, 0x05, 0x46, 0x61,
	0x63, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x63, 0x5f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x44, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x64, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x63, 0x49, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64,
	0x22, 0x34, 0x0a, 0x06, 0x46, 0x61, 0x63, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x61,
	0x63, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x06,
	0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x74, 0x12, 0x28, 0x0a,
	0x05, 0x66, 0x61, 0x63, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74,
	0x52, 0x05, 0x66, 0x61, 0x63, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x62, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x61,
	0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x61,
	0x63, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61,
	0x63, 0x65, 0x74, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x15,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x61, 0x63, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x13, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x65, 0x74,
	0x73, 0x22, 0xa7, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46,
	0x61, 0x63, 0x65, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x61, 0x63, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x61, 0x63, 0x65,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x05, 0x0a, 0x0c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x03,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x76,
	0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f,
	0x64, 0x63, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x61, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54,
	0x6f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x64, 0x63, 0x5f, 0x69, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x63, 0x49, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x1a,
	0x36, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x54, 0x6f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x22, 0xa0, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x2e,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46,
	0x61, 0x63, 0x65, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x36,
	0x0a, 0x08, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x4f, 0x62, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x64, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x44, 0x63, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x0d, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x68, 0x6f, 0x72, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x62, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x6f, 0x62, 0x73, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x62, 0x73,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x62,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x76,
	0x61, 0x6c, 0x22, 0xb4, 0x01, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x5a, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x56, 0x61, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x73, 0x56, 0x61, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2d, 0x0a,
	0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0x2c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0xf3, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x3b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x12, 0x2d,
	0x0a, 0x12, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73, 0x22, 0xb9,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x54, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd2, 0x01, 0x0a, 0x08, 0x53,
	0x74, 0x61, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x44, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x61, 0x63,
	0x65, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x41, 0x0a, 0x13,
	0x44, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x42, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x44, 0x61, 0x74, 0x65, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76,
	0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x56,
	0x61, 0x72, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x44, 0x61, 0x74, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x52, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x6f,
	0x72, 0x67, 0x2f, 0x6d, 0x69, 0x78, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stat_proto_rawDescOnce sync.Once
	file_stat_proto_rawDescData = file_stat_proto_rawDesc
)

func file_stat_proto_rawDescGZIP() []byte {
	file_stat_proto_rawDescOnce.Do(func() {
		file_stat_proto_rawDescData = protoimpl.X.CompressGZIP(file_stat_proto_rawDescData)
	})
	return file_stat_proto_rawDescData
}

var file_stat_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_stat_proto_goTypes = []interface{}{
	(*Facet)(nil),                          // 0: datacommons.Facet
	(*Facets)(nil),                         // 1: datacommons.Facets
	(*PlaceVariableFacet)(nil),             // 2: datacommons.PlaceVariableFacet
	(*PlaceVariableFacets)(nil),            // 3: datacommons.PlaceVariableFacets
	(*PointStat)(nil),                      // 4: datacommons.PointStat
	(*SourceSeries)(nil),                   // 5: datacommons.SourceSeries
	(*Series)(nil),                         // 6: datacommons.Series
	(*ObsTimeSeries)(nil),                  // 7: datacommons.ObsTimeSeries
	(*ObsCollection)(nil),                  // 8: datacommons.ObsCollection
	(*ChartStore)(nil),                     // 9: datacommons.ChartStore
	(*PlaceStat)(nil),                      // 10: datacommons.PlaceStat
	(*StatVarSeries)(nil),                  // 11: datacommons.StatVarSeries
	(*GetStatsRequest)(nil),                // 12: datacommons.GetStatsRequest
	(*GetStatsResponse)(nil),               // 13: datacommons.GetStatsResponse
	(*GetStatValueRequest)(nil),            // 14: datacommons.GetStatValueRequest
	(*GetStatValueResponse)(nil),           // 15: datacommons.GetStatValueResponse
	(*GetStatSeriesRequest)(nil),           // 16: datacommons.GetStatSeriesRequest
	(*GetStatSeriesResponse)(nil),          // 17: datacommons.GetStatSeriesResponse
	(*GetStatAllRequest)(nil),              // 18: datacommons.GetStatAllRequest
	(*GetStatAllResponse)(nil),             // 19: datacommons.GetStatAllResponse
	(*StatDate)(nil),                       // 20: datacommons.StatDate
	(*StatDateList)(nil),                   // 21: datacommons.StatDateList
	(*GetStatDateWithinPlaceRequest)(nil),  // 22: datacommons.GetStatDateWithinPlaceRequest
	(*GetStatDateWithinPlaceResponse)(nil), // 23: datacommons.GetStatDateWithinPlaceResponse
	nil,                                    // 24: datacommons.SourceSeries.ValEntry
	nil,                                    // 25: datacommons.SourceSeries.PlaceToLatestDateEntry
	nil,                                    // 26: datacommons.Series.ValEntry
	nil,                                    // 27: datacommons.PlaceStat.StatVarDataEntry
	nil,                                    // 28: datacommons.StatVarSeries.DataEntry
	nil,                                    // 29: datacommons.GetStatSeriesResponse.SeriesEntry
	nil,                                    // 30: datacommons.GetStatAllResponse.PlaceDataEntry
	nil,                                    // 31: datacommons.StatDate.DatePlaceCountEntry
	nil,                                    // 32: datacommons.GetStatDateWithinPlaceResponse.DataEntry
}
var file_stat_proto_depIdxs = []int32{
	0,  // 0: datacommons.Facets.facets:type_name -> datacommons.Facet
	0,  // 1: datacommons.PlaceVariableFacet.facet:type_name -> datacommons.Facet
	2,  // 2: datacommons.PlaceVariableFacets.place_variable_facets:type_name -> datacommons.PlaceVariableFacet
	0,  // 3: datacommons.PointStat.metadata:type_name -> datacommons.Facet
	24, // 4: datacommons.SourceSeries.val:type_name -> datacommons.SourceSeries.ValEntry
	25, // 5: datacommons.SourceSeries.place_to_latest_date:type_name -> datacommons.SourceSeries.PlaceToLatestDateEntry
	26, // 6: datacommons.Series.val:type_name -> datacommons.Series.ValEntry
	0,  // 7: datacommons.Series.metadata:type_name -> datacommons.Facet
	5,  // 8: datacommons.ObsTimeSeries.source_series:type_name -> datacommons.SourceSeries
	5,  // 9: datacommons.ObsCollection.source_cohorts:type_name -> datacommons.SourceSeries
	7,  // 10: datacommons.ChartStore.obs_time_series:type_name -> datacommons.ObsTimeSeries
	8,  // 11: datacommons.ChartStore.obs_collection:type_name -> datacommons.ObsCollection
	27, // 12: datacommons.PlaceStat.stat_var_data:type_name -> datacommons.PlaceStat.StatVarDataEntry
	28, // 13: datacommons.StatVarSeries.data:type_name -> datacommons.StatVarSeries.DataEntry
	29, // 14: datacommons.GetStatSeriesResponse.series:type_name -> datacommons.GetStatSeriesResponse.SeriesEntry
	30, // 15: datacommons.GetStatAllResponse.place_data:type_name -> datacommons.GetStatAllResponse.PlaceDataEntry
	31, // 16: datacommons.StatDate.date_place_count:type_name -> datacommons.StatDate.DatePlaceCountEntry
	0,  // 17: datacommons.StatDate.metadata:type_name -> datacommons.Facet
	20, // 18: datacommons.StatDateList.stat_date:type_name -> datacommons.StatDate
	32, // 19: datacommons.GetStatDateWithinPlaceResponse.data:type_name -> datacommons.GetStatDateWithinPlaceResponse.DataEntry
	7,  // 20: datacommons.PlaceStat.StatVarDataEntry.value:type_name -> datacommons.ObsTimeSeries
	6,  // 21: datacommons.StatVarSeries.DataEntry.value:type_name -> datacommons.Series
	10, // 22: datacommons.GetStatAllResponse.PlaceDataEntry.value:type_name -> datacommons.PlaceStat
	21, // 23: datacommons.GetStatDateWithinPlaceResponse.DataEntry.value:type_name -> datacommons.StatDateList
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_stat_proto_init() }
func file_stat_proto_init() {
	if File_stat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Facet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Facets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceVariableFacet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceVariableFacets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Series); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsTimeSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatVarSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatDateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatDateWithinPlaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatDateWithinPlaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_stat_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_stat_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ChartStore_ObsTimeSeries)(nil),
		(*ChartStore_ObsCollection)(nil),
	}
	file_stat_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stat_proto_goTypes,
		DependencyIndexes: file_stat_proto_depIdxs,
		MessageInfos:      file_stat_proto_msgTypes,
	}.Build()
	File_stat_proto = out.File
	file_stat_proto_rawDesc = nil
	file_stat_proto_goTypes = nil
	file_stat_proto_depIdxs = nil
}
