# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A k8s deployment defines what containers to servce,
# how many pods should be served, and how much resources
# should be allocated, and how new pods are rolled out.
#
# Mixer defines 1 deployment per service group.
# A deployment is what autoscalers scale.

{{- $index := 0 }}
{{- range $serviceName, $group := .Values.serviceGroups }}
{{- if gt $index 0 }}
---
{{- end  }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mixer.fullname" $ }}-{{ $serviceName }}
  namespace: {{ $.Values.namespace.name }}
  labels:
    service:  {{ include "mixer.fullname" $ }}-{{ $serviceName }}
    {{- include "mixer.labels" $ | nindent 4 }}
spec:
  replicas: {{ $group.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      # maximum number of Pods that can be created over the desired number of Pods
      # 25% of default pods (+1 in case default < 4)
      maxSurge: {{ div $group.replicas 4 | add 1 }}
      # Maximum number of pods that can be unavailable during the update process
      # 25% of default pods (+1 in case default < 4)
      maxUnavailable: {{ div $group.replicas 4 | add 1 }}
  selector:
    matchLabels:
      service:  {{ include "mixer.fullname" $ }}-{{ $serviceName }}
      {{- include "mixer.selectorLabels" $ | nindent 6 }}
  template:
    metadata:
      annotations:
        timestamp: {{ now | quote }}
      labels:
        service:  {{ include "mixer.fullname" $ }}-{{ $serviceName }}
        {{- include "mixer.selectorLabels" $ | nindent 8 }}
    spec:
      {{- if $group.nodePool }}
      nodeSelector:
        cloud.google.com/gke-nodepool: {{ $group.nodePool }}
      {{- end }}
      serviceAccountName: {{ $.Values.serviceAccount.name }}
      volumes:
        - name: schema-mapping
          configMap:
            name: {{ include "mixer.fullname" $ }}-schema-mapping
        - name: blocklist-svg
          configMap:
            name: blocklist-svg
            optional: true
        - name: service-config-volume
          configMap:
            defaultMode: 420
            name: service-config-configmap
      containers:
        - name: mixer
          image:  "{{ $.Values.mixer.image.repository }}:{{ $.Values.mixer.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.mixer.image.pullPolicy }}
          resources:
            limits:
              memory: {{ $group.resources.memoryLimit }}
            requests:
              memory:  {{ $group.resources.memoryRequest }}
          args:
            - --base_bigtable_info=$(BASE_BIGTABLE_INFO)
            - --custom_bigtable_info=$(CUSTOM_BIGTABLE_INFO)
            - --host_project=$(HOST_PROJECT)
            - --bq_dataset=$(BIGQUERY)
            - --schema_path=/datacommons/mapping
            - --remote_mixer_domain={{ $.Values.mixer.remoteMixerDomain }}
            - --use_base_bigtable={{ $.Values.mixer.useBaseBigtable }}
            - --use_custom_bigtable={{ $.Values.mixer.useCustomBigtable }}
            - --use_branch_bigtable={{ $.Values.mixer.useBranchBigtable }}
            {{- if eq $.Values.mixer.bigqueryOnly true }}
            - --bigquery_only=true
            {{- end }}
            - --cache_svg={{ default false $group.cacheSVG }}
            {{- if eq $.Values.mixer.foldRemoteRootSvg true }}
            - --fold_remote_root_svg=true
            {{- end }}
            {{- if eq $.Values.mixer.cacheSVFormula true }}
            - --cache_sv_formula=true
            {{- end }}
            - --use_spanner_graph={{ $.Values.mixer.useSpannerGraph }}
            - --spanner_graph_info=$(SPANNER_GRAPH_INFO)
          volumeMounts:
            - name: schema-mapping
              mountPath: /datacommons/mapping
            - name: blocklist-svg
              mountPath: /datacommons/svg
          env:
            - name: HOST_PROJECT
              valueFrom:
                configMapKeyRef:
                  name: {{ include "mixer.fullname" $ }}-mixer-config
                  key: hostProject
            - name: BIGQUERY
              {{- if eq $.Values.mixer.bigqueryOnly true }}
              value: {{ $.Values.mixer.bigqueryTableRef }}
              {{- else }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "mixer.fullname" $ }}-store-config
                  key: bigquery.version
              {{- end }}
            - name: BASE_BIGTABLE_INFO
              valueFrom:
                configMapKeyRef:
                  name: {{ include "mixer.fullname" $ }}-store-config
                  key: base_bigtable_info.yaml
            - name: CUSTOM_BIGTABLE_INFO
              valueFrom:
                configMapKeyRef:
                  name: {{ include "mixer.fullname" $ }}-store-config
                  key: custom_bigtable_info.yaml
            - name: SPANNER_GRAPH_INFO
              valueFrom:
                configMapKeyRef:
                  name: {{ include "mixer.fullname" $ }}-store-config
                  key: spanner_graph_info.yaml
            - name: MIXER_HASH
              valueFrom:
                configMapKeyRef:
                  name: {{ include "mixer.fullname" $ }}-githash
                  key: mixer_hash.txt
          ports:
            - containerPort: 12345
          startupProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:12345"]
            failureThreshold: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:12345"]
            periodSeconds: 10
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:12345"]
            periodSeconds: 10
            initialDelaySeconds: 10
        - name: esp
          image:  "{{ $.Values.esp.image.repository }}:{{ $.Values.esp.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.esp.image.pullPolicy }}
          resources:
            limits:
              memory: "300M"
            requests:
              memory: "300M"
          volumeMounts:
            - mountPath: /etc/espv2_config
              name: service-config-volume
          args:
            - --listener_port=8081
            - --backend=grpc://127.0.0.1:12345
            - --cors_preset=basic
            - --healthz=healthz
            - --service_json_path=/etc/espv2_config/service_config.json
            - --envoy_connection_buffer_limit_bytes=209715200 # 200Mb
          env:
            - name: SERVICE_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ include "mixer.fullname" $ }}-mixer-config
                  key: serviceName
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8081
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            periodSeconds: 5
            initialDelaySeconds: 5
          ports:
            - containerPort: 8081
{{- $index = add $index 1 }}
{{- end }}
